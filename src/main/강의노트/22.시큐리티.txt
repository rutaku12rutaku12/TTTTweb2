[ 스프링 시큐리티 ]
    1. 정의 : spring 기반의 인증 과 인가 제공하는 라이브러리
    2. 대표기능 : HTTP 요청 , 로그인 , 로그아웃 , 소셜로그인 , CSRF 공격 방지 , 토큰 기반 지원 등등

    3. 설치 : implementation 'org.springframework.boot:spring-boot-starter-security'
    * 설치 의 동시에 미리 만들어진 다수 필터(유효성검사) 서버에 적용된다. *
    4. 시큐리티 커스텀( 버전[3.x]과 상황에 따른 방법이 다양 )

        1) HTTP 요청 권한
            http.authorizeHttpRequests( 매개변수 -> 매개변수.requestMatchers("경로").권한함수 );
            - 권한 함수 : .hasRole("권한명"); , .hasAnyRole("권한명1", "권한명2"); .permitAll() : 모든권한 (공개용)
                vs 각 Controller 에서 @PreAuthorize("권한")
        2) CSRF 필터
            http.csrf( 매개변수 -> 매개변수.ignoringRequestMatchers("csrf 제외할경로") );
            vs
            http.csrf( 매개변수 -> 매개변수.disable() );
        ======================== 인증 방법에 따라 달라질수 있다. web2:쿠키+토큰 ==================
        3) 시큐리티 세션 필터 종료
            http.sessionManagement( s->s.sessionCreationPolicy( SessionCreationPolicy.STATELESS) );
        4) 시큐리티 토큰 필터 재정의
            http.addFilterBefore( 내가만든토큰필터 , UsernamePasswordAuthenticationFilter.class );

        [내가만든토큰필터] : 시큐리티가 사용했던 토큰 필터 방식을 내가 원하는 방식 변경
        @Component
        @RequiredArgsConstructor
        public class JwtAuthFilter extends OncePerRequestFilter {
            private final JwtService jwtService;
            @Override
            protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
                String token = null ;
                if( request.getCookies() != null ){
                    for(Cookie cookie : request.getCookies() ){
                        if( cookie.getName().equals("쿠키명") ){
                            token = cookie.getValue();
                            System.out.println("cookie = " + cookie);
                        }
                    }
                }
                if( token != null && jwtService.checkToken( token ) ){
                    String uid = jwtService.getUid( token );
                    String urole = jwtService.getUrole( token );
                    UsernamePasswordAuthenticationToken t =
                        new UsernamePasswordAuthenticationToken(
                                uid , null ,
                                List.of( new SimpleGrantedAuthority("ROLE_"+ urole ) ) );
                    System.out.println("t = " + t);
                    SecurityContextHolder.getContext().setAuthentication( t );
                }
                filterChain.doFilter( request , response );
            } // methode end
        } // class end